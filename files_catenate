#include <cstdlib>
#include <fstream>
#include <iostream>
#include <vector>
#include <experimental/filesystem>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

using namespace std;

int main(int argc, char *argv[])
{
    string path = "./";
    ofstream myfile("out.txt");

    for (size_t i = 0; i <= 70; ++i)
    {
        for (const auto &files : experimental::filesystem::recursive_directory_iterator(path))
        {

            string filePath = files.path();


            ifstream file(filePath, ifstream::binary);

            
            if (not file)
            {
                cerr << "file: " << filePath << " failed to open" << endl;
                return 1;
            }

            char *char_arr;
            string str_obj(filePath);
            char_arr = &str_obj[0];
            cout << char_arr;
           
            struct stat filestatus;
            stat(char_arr, &filestatus);

            size_t total_size = filestatus.st_size;
            size_t chunk_size = 20 * 1024 * 1024;


            cout << "using chunk size: " << chunk_size << endl;

            /* on to the actual algorithm */
            size_t total_chunks = total_size / chunk_size;
            size_t last_chunk_size = total_size % chunk_size;

            if (last_chunk_size != 0) /* if the above division was uneven */
            {
                ++total_chunks; /* add an unfilled final chunk */
            }
            else /* if division was even, last chunk is full */
            {
                last_chunk_size = chunk_size;
            }


            size_t this_chunk_size =
                i == total_chunks - 1 /* if last chunk */
                    ? last_chunk_size /* then fill chunk with remaining bytes */
                    : chunk_size;     /* else fill entire chunk */

            /* if needed, we also have the position of this chunk in the file*/
            size_t start_of_chunk = i * chunk_size;
            file.seekg(start_of_chunk, ios::beg);
            /* adapt this portion as necessary, this is the fast C++ way */
            vector<char> chunk_data(this_chunk_size);
            file.read(&chunk_data[0],   /* address of buffer start */
                      this_chunk_size); /* this many bytes is to be read */

            /* do something with chunk_data before next iteration */
            cout << "chunk #" << i << endl;
            myfile << "chunk #" << i << endl;

            for (const auto c : chunk_data) 
            {
                cout << hex << int(c);
               // myfile << hex << int(c);
                myfile <<c;
            }
            cout << endl;
            myfile << endl;

        }
    }
}
